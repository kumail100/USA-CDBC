contract USDCBDC {

    // State variables
    mapping(address => uint) balances;
    uint totalSupply;
    uint reserveAmount;

    // Reserve mechanism - Loan issuance
    mapping(address => uint) loanedTokens;
    uint loanInterestRate = 0; // Interest-free loans

    // Minting and Burning rules
    function mint(address to, uint amount) {
        // Mint new tokens into circulation
        totalSupply += amount;
        balances[to] += amount;
    }

    function burn(address from, uint amount) {
        // Burn tokens to reduce supply
        totalSupply -= amount;
        balances[from] -= amount;
    }

    // Reserve mechanism
    function createLoan(address borrower, uint loanAmount) {
        require(reserveAmount >= loanAmount, "Insufficient reserve for loan");
        reserveAmount -= loanAmount;
        loanedTokens[borrower] += loanAmount;
    }

    function repayLoan(address borrower, uint amount) {
        loanedTokens[borrower] -= amount;
        reserveAmount += amount;
    }

    // Transfer tokens between users
    function transfer(address from, address to, uint amount) {
        require(balances[from] >= amount, "Insufficient balance");
        balances[from] -= amount;
        balances[to] += amount;
    }

    // Reserve management
    function increaseReserve(uint amount) {
        reserveAmount += amount;
    }

    function decreaseReserve(uint amount) {
        reserveAmount -= amount;
    }

    // Supply management
    function getSupply() public view returns (uint) {
        return totalSupply;
    }

    // Get balance of a specific address
    function getBalance(address account) public view returns (uint) {
        return balances[account];
    }
}
